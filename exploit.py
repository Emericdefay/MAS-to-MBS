#-------------------------------------------------------------------------------
# Name:        MAS2MBS.py
# Purpose:
#
# Author:      emericdefay
#
# Created:     22/10/2020
#-------------------------------------------------------------------------------

#Importations:

import midi_reader
import convertor
import os
import sys
import warnings

def midi_piste(midi_name):
    # Sortie : la piste midi
    return midi_reader.start(midi_name)[0]

def midi_tempo(midi_name):
    # Sortie : le tempo
    return midi_reader.start(midi_name)[1]

def midi_noire(midi_name):
    #Sortie : La durée de la noire
    return midi_reader.start(midi_name)[2]

def somme_hex_to_int(tableau):
    # Entrée : [hex,hex,...] en str
    # Sortie : int
    tab = []
    conv = "0x"
    for k in range(len(tableau)):
        conv += tableau[k]
    conv = int(conv,16)
    return conv

def reduction_temps(tableau):
    PPRC = 10000000
    for k in range(len(tableau)):
        for l in range(1,len(tableau[k])):
            if tableau[k][l][1] < PPRC and tableau[k][l][1] != 1:
                PPRC = tableau[k][l][1]
                #print("nouveau PPRC :", PPRC) #DEBUGGAGE
    for k in range(len(tableau)):
        for l in range(1,len(tableau[k])):
            tableau[k][l][1] = tableau[k][l][1]//PPRC
    #print(PPRC) #DEBUGGAGE
    return tableau

def conv_pourc_to_second(tableau):
    # Entrée : [[Note,[0/1,pourc],[0/1,pourc]],[Note,[0/1,pourc],[0/1,pourc]]]
    # Sortie : [[],[],...]

    Matrice = []
    for k in range(len(tableau)):
        Matrice.append([])
        for l in range(1,len(tableau[k])):
            activation_note = 0
            for m in range(tableau[k][l][1]):
                if tableau[k][l][0] == 1 and activation_note == 0:
                    activation_note = 1
                    Matrice[k].append(1)
                else:
                    Matrice[k].append(0)
    return Matrice

def index_tab(tableau):
    #index_note = index_notes.index(midi_file[k+1])
    # Retourne l'index de la note jouée.3

                    #index_note = index_notes.index(midi_file[k+1])
                    # Retourne l'index de la note arretée.
    pass

def decodage_piste(tableau, notes, index_ref):
    # Entrée: [[145, ['24', '00'], ['00', '00']], [145, ['30', '00'], ['30', '00']],...]
    # Sortie : [[Note,[0/1,pourc],[0/1,pourc]],[Note,[0/1,pourc],[0/1,pourc]]]

    sync_tab = []

    midi_tab = convertor.start()

    code_timer = []
    code_timer_sync = []

    for k in range(len(tableau)):
        code_timer.append(tableau[k][0])

    nombre_frac = 0
    tamp = 0

    for ID in code_timer:
        if tamp != ID:
            nombre_frac += 1
            tamp = ID

    for k in range(nombre_frac):
        code_timer_sync.append(0)
        for l in range(code_timer.count(code_timer[0])):
            code_timer.remove(code_timer[0])
            code_timer_sync[k] += 1

    #print(code_timer_sync)

    # Les notes activées :

    notes_activee = []
    silences = []

    add_syncs = 0
    tab_add = []
    for k in range(len(code_timer_sync)):
        add_syncs += code_timer_sync[k]
        tab_add.append(add_syncs)

    #print(tab_add)
    #print(tableau)

    #print(code_timer_sync)

    for k in range(len(code_timer_sync)):
        notes_activee.append([])
        mini = 0
        if tab_add[k-1] > tab_add[k]:
            mini = 0
        else:
            mini = tab_add[k-1]
        for l in range(mini,tab_add[k]):
            # PROBLEME
            index_note = index_ref.index(tableau[l][1][0])
            #print(tableau[l][1][0],l)
            notes_activee[k].append(midi_tab[index_note][1])

        if tableau[tab_add[k]-1][-1][-1] != '00' and tableau[tab_add[k]-1][-1][-1] != "81":
            #print(tableau[tab_add[k]-1][-1][-1])
            silences.append(k+1)
            #print("s")

    # Ajout de silences
    for k in range(len(silences)):
        notes_activee.insert(silences[k],["00"])

    temps_silences = []
    for k in range(len(code_timer_sync)):
        temps_silences.append(tableau[code_timer_sync[k]][-1][0])

    temps_note_activee = []
    marqueur_temps=-1
    for k in range(len(code_timer_sync)):
        marqueur_temps+=code_timer_sync[k]
        temps_note_activee.append(tableau[marqueur_temps][-1][0])

    for k in range(len(notes_activee)):
        if notes_activee[k] == ["00"]:
            temps_note_activee.insert(k+1,temps_silences[k-1])

    #print("temps des notes :")
    #print(temps_note_activee)
    #print("notes")
    #print(notes_activee)
    #print("index")
    #print(index_ref)

    for k in range(len(index_ref)):
        sync_tab.append([index_ref[k]])

    for k in range(len(temps_note_activee)):
        for l in range(len(index_ref)):
            if index_ref[l] in notes_activee[k]:
                sync_tab[l].append([1,int(temps_note_activee[k])])
            else:
                sync_tab[l].append([0,int(temps_note_activee[k])])

    # Sortie : [[Note,[0/1,pourc],[0/1,pourc]],[Note,[0/1,pourc],[0/1,pourc]]]

    return sync_tab

def midi_note_life(midi_name):
    notes = []
    midi_file = midi_reader.start(midi_name)[0]
    midi_converti = convertor.start()

    #print(midi_file)

    index_notes = []

    for k in midi_converti:
        notes.append([])

    # notes = [[],[],[],[],[],...]
    matrice = []
    for k in range(len(notes)):
        notes[k].append(midi_converti[k][1])
        index_notes.append(midi_converti[k][1])
        matrice.append(midi_converti[k][1])

    # notes = [['A']['B']['C']['D']['E'],...]

    liste_tampon = []

    for k in range(len(midi_file)):
        liste_notes_jouee = []
        liste_notes_temps = []

        if midi_file[k][0] == "9":
            for l in range(k,len(midi_file)):
                if midi_file[l][0] == "8":
                    liste_notes_jouee.append("00")
                    liste_notes_temps.append(midi_file[l+3])
                    break # Casse la boucle actuelle

                if midi_file[l][0] == "9" and k+4!= l:
                    liste_notes_jouee.append(midi_file[l+1])
                    liste_notes_temps.append(midi_file[l+3])

                    temp = somme_hex_to_int(liste_notes_temps)

            liste_tampon.append([l,liste_notes_jouee, liste_notes_temps])

    #print(liste_tampon)

    notes = decodage_piste(liste_tampon, notes, index_notes)

    return notes


def midi_printing(tableau,papier_MBS):
    with open(papier_MBS, 'w+') as printing:
        for k in range(len(tableau)):
            for action in tableau[k]:
                printing.write(str(action))
                printing.write("\t")
            printing.write("\n")
    return print("Impression : " + papier_MBS + " effectée.")

def transfTab(tableau=[[1,2,3],[4,5,6]]):
    """ [[a,b,c],[d,e,f]] -> [[a,d],[b,e],[c,f]]"""
    tableauConverti =[]
    for k in range(len(tableau[0])):
        tableauConverti.append([])
    for k in range(len(tableau[0])):
        for l in range(len(tableau)):
            tableauConverti[k].append(tableau[l][k])
    return tableauConverti



def start(name="default.mid",printing=False):
    a = conv_pourc_to_second(reduction_temps(midi_note_life(name)))
    if printing:
        midi_printing(a,"sortie - "+name[:-4]+".txt")
    return transfTab(a)



if __name__ == '__main__':
    print("[Debuggage]")
    a=start("default.mid")
    print("fini")

